// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/userorder.proto

package userorder

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Userorder service

func NewUserorderEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Userorder service

type UserorderService interface {
	CreateOrder(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	GetOrderInfo(ctx context.Context, in *GetReq, opts ...client.CallOption) (*GetResp, error)
	UpdateStatus(ctx context.Context, in *UpdateReq, opts ...client.CallOption) (*UpdateResp, error)
	UpdateComment(ctx context.Context, in *CommentReq, opts ...client.CallOption) (*CommentResp, error)
}

type userorderService struct {
	c    client.Client
	name string
}

func NewUserorderService(name string, c client.Client) UserorderService {
	return &userorderService{
		c:    c,
		name: name,
	}
}

func (c *userorderService) CreateOrder(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Userorder.CreateOrder", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userorderService) GetOrderInfo(ctx context.Context, in *GetReq, opts ...client.CallOption) (*GetResp, error) {
	req := c.c.NewRequest(c.name, "Userorder.GetOrderInfo", in)
	out := new(GetResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userorderService) UpdateStatus(ctx context.Context, in *UpdateReq, opts ...client.CallOption) (*UpdateResp, error) {
	req := c.c.NewRequest(c.name, "Userorder.UpdateStatus", in)
	out := new(UpdateResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userorderService) UpdateComment(ctx context.Context, in *CommentReq, opts ...client.CallOption) (*CommentResp, error) {
	req := c.c.NewRequest(c.name, "Userorder.UpdateComment", in)
	out := new(CommentResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Userorder service

type UserorderHandler interface {
	CreateOrder(context.Context, *Request, *Response) error
	GetOrderInfo(context.Context, *GetReq, *GetResp) error
	UpdateStatus(context.Context, *UpdateReq, *UpdateResp) error
	UpdateComment(context.Context, *CommentReq, *CommentResp) error
}

func RegisterUserorderHandler(s server.Server, hdlr UserorderHandler, opts ...server.HandlerOption) error {
	type userorder interface {
		CreateOrder(ctx context.Context, in *Request, out *Response) error
		GetOrderInfo(ctx context.Context, in *GetReq, out *GetResp) error
		UpdateStatus(ctx context.Context, in *UpdateReq, out *UpdateResp) error
		UpdateComment(ctx context.Context, in *CommentReq, out *CommentResp) error
	}
	type Userorder struct {
		userorder
	}
	h := &userorderHandler{hdlr}
	return s.Handle(s.NewHandler(&Userorder{h}, opts...))
}

type userorderHandler struct {
	UserorderHandler
}

func (h *userorderHandler) CreateOrder(ctx context.Context, in *Request, out *Response) error {
	return h.UserorderHandler.CreateOrder(ctx, in, out)
}

func (h *userorderHandler) GetOrderInfo(ctx context.Context, in *GetReq, out *GetResp) error {
	return h.UserorderHandler.GetOrderInfo(ctx, in, out)
}

func (h *userorderHandler) UpdateStatus(ctx context.Context, in *UpdateReq, out *UpdateResp) error {
	return h.UserorderHandler.UpdateStatus(ctx, in, out)
}

func (h *userorderHandler) UpdateComment(ctx context.Context, in *CommentReq, out *CommentResp) error {
	return h.UserorderHandler.UpdateComment(ctx, in, out)
}
